package com.springboot.mysql.crud.controller;import com.springboot.mysql.crud.infrastructure.entity.StudentEntity;import com.springboot.mysql.crud.service.StudentService;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.net.URISyntaxException;import java.util.List;@RestController@RequestMapping("/student")public class StudentController {    Logger logger = LoggerFactory.getLogger(StudentController.class);    private final StudentService studentService;    public StudentController(StudentService studentService) {        this.studentService = studentService;    }    @GetMapping("/getAllStudent")    public List<StudentEntity> getAllStudent() {        logger.info("StudentAPI getAllStudent initialized");        List<StudentEntity> studentEntityList = studentService.getAllStudent();        logger.info("StudentAPI getAllStudent completed");        return studentEntityList;    }    @GetMapping("/getSingleStudent/{id}")    public StudentEntity getSingleStudent(@PathVariable Long id) {        logger.info("StudentAPI getSingleStudent initialized");        StudentEntity studentEntity = studentService.getSingleStudent(id);        logger.info("StudentAPI getSingleStudent completed : {} ", studentEntity.toString());        return studentEntity;    }    @PostMapping("/createStudent")    public ResponseEntity createStudent(@RequestBody StudentEntity studentEntity) throws URISyntaxException {        logger.info("StudentAPI createStudent initialized");        ResponseEntity responseEntity = studentService.createStudent(studentEntity);        logger.info("StudentAPI createStudent completed : {} ", responseEntity.getBody());        return responseEntity;    }    @PutMapping("/updateStudent")    public ResponseEntity updateStudent(@RequestBody StudentEntity studentEntity) {        logger.info("StudentAPI updateStudent initialized");        ResponseEntity responseEntity = studentService.updateStudent(studentEntity);        logger.info("StudentAPI updateStudent completed : {} ", responseEntity.getBody());        return responseEntity;    }    @DeleteMapping("/deleteStudent/{id}")    public ResponseEntity deleteStudent(@PathVariable Long id) {        logger.info("StudentAPI deleteStudent initialized");        studentService.deleteStudent(id);        logger.info("StudentAPI deleteStudent completed");        return ResponseEntity.ok().build();    }}